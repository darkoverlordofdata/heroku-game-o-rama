// Generated by CoffeeScript 1.9.1

/*
 * Preload the templates & Start
 */
var gameshare,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

$(function() {
  return gameshare.loadTemplates(['MainView', 'DashboardView', 'GamesTableView', 'GameView', 'GameDetailView'], function() {
    gameshare.router = new gameshare.Router();
    return Backbone.history.start();
  });
});


/*
 * gameshare application namespace
 */

gameshare = {
  views: {},
  models: {},
  loadTemplates: function(views, next) {
    var deferredGets;
    deferredGets = [];

    /*
     * Async load Liquid Templates
     * Each template is named the same as it's view class
     */
    $.each(views, function(index, view) {
      if (gameshare[view]) {
        return deferredGets.push($.get('tpl/' + view + '.html', function(data) {
          return gameshare[view].prototype.template = Liquid.Template.parse(data);
        }, 'html'));
      }
    });
    $.when.apply(null, deferredGets).done(next);
  }
};


/*
 * SPA Router
 */

gameshare.Router = (function(superClass) {
  extend(Router, superClass);

  function Router() {
    return Router.__super__.constructor.apply(this, arguments);
  }


  /*
   * these routes correspond to the navbar menu
   */

  Router.prototype.routes = {
    '': 'dashboard',
    'dashboard': 'dashboard',
    'settings': 'settings',
    'profile': 'profile',
    'logout': 'logout',
    'new': 'newgame',
    'import': 'import',
    'export': 'export',
    'game/:id': 'game'
  };


  /*
   * Set the document body to the main template
   */

  Router.prototype.initialize = function() {
    gameshare.mainView = new gameshare.MainView();
    $('body').html(gameshare.mainView.render().el);
    this.$content = $("#content");
  };


  /*
   * The default route
   */

  Router.prototype.dashboard = function() {
    gameshare.dashView = new gameshare.DashboardView();
    this.$content.html(gameshare.dashView.render().el);
  };


  /*
   * Site settings
   */

  Router.prototype.settings = function() {};


  /*
   * Loged in profile
   */

  Router.prototype.profile = function() {};


  /*
   * Logout
   */

  Router.prototype.logout = function() {
    location.replace('/logout');
  };

  Router.prototype.game = function(id) {
    gameshare.gameView = new gameshare.GameView({
      game: id
    });
    this.$content.html(gameshare.gameView.render().el);
  };

  Router.prototype.newgame = function() {};

  return Router;

})(Backbone.Router);


/*
 * Game Model
 */

gameshare.GameModel = (function(superClass) {
  extend(GameModel, superClass);

  function GameModel() {
    this.parse = bind(this.parse, this);
    return GameModel.__super__.constructor.apply(this, arguments);
  }

  GameModel.prototype.urlRoot = '/api/Games';

  GameModel.prototype.parse = function(data) {
    if (Array.isArray(data)) {
      return data[0];
    } else {
      return data;
    }
  };

  return GameModel;

})(Backbone.Model);


/*
 * Game Model Collection
 */

gameshare.GameCollection = (function(superClass) {
  extend(GameCollection, superClass);

  function GameCollection() {
    return GameCollection.__super__.constructor.apply(this, arguments);
  }

  GameCollection.prototype.model = gameshare.GameModel;

  GameCollection.prototype.url = '/api/Games';

  return GameCollection;

})(Backbone.Collection);


/*
 * Main View - document.body
 */

gameshare.MainView = (function(superClass) {
  extend(MainView, superClass);

  function MainView() {
    return MainView.__super__.constructor.apply(this, arguments);
  }

  MainView.prototype.initialize = function() {};

  MainView.prototype.render = function() {
    this.$el.html(this.template.render());
    return this;
  };

  return MainView;

})(Backbone.View);


/*
 * Dash View
 */

gameshare.DashboardView = (function(superClass) {
  extend(DashboardView, superClass);

  function DashboardView() {
    this.render = bind(this.render, this);
    return DashboardView.__super__.constructor.apply(this, arguments);
  }

  DashboardView.prototype.initialize = function() {
    this.games = new gameshare.GameCollection();
    this.tableView = new gameshare.GamesTableView({
      model: this.games
    });
  };

  DashboardView.prototype.render = function() {
    this.$el.html(this.template.render());
    $('#games', this.el).replaceWith(this.tableView.render().el);
    return this;
  };

  return DashboardView;

})(Backbone.View);


/*
 * Dash SubView
 */

gameshare.GamesTableView = (function(superClass) {
  extend(GamesTableView, superClass);

  function GamesTableView() {
    this.render = bind(this.render, this);
    return GamesTableView.__super__.constructor.apply(this, arguments);
  }

  GamesTableView.prototype.tagName = 'tbody';

  GamesTableView.prototype.initialize = function() {
    this.model.bind('reset', this.render);
    this.model.fetch({
      reset: true
    });
  };

  GamesTableView.prototype.render = function() {
    var $el;
    $el = $(this.template.render({
      games: this.model.models
    }));
    this.$el.html($el.html());
    return this;
  };

  return GamesTableView;

})(Backbone.View);


/*
 * Game View
 */

gameshare.GameView = (function(superClass) {
  extend(GameView, superClass);

  function GameView() {
    this.render = bind(this.render, this);
    return GameView.__super__.constructor.apply(this, arguments);
  }

  GameView.prototype.initialize = function(options) {
    this.game = new gameshare.GameModel({
      id: options.game
    });
    this.gameView = new gameshare.GameDetailView({
      model: this.game
    });
  };

  GameView.prototype.render = function() {
    this.$el.html(this.template.render());
    $('#game', this.el).replaceWith(this.gameView.render().el);
    return this;
  };

  return GameView;

})(Backbone.View);


/*
 * Dash SubView
 */

gameshare.GameDetailView = (function(superClass) {
  extend(GameDetailView, superClass);

  function GameDetailView() {
    this.render = bind(this.render, this);
    return GameDetailView.__super__.constructor.apply(this, arguments);
  }

  GameDetailView.prototype.tagName = 'table';

  GameDetailView.prototype.initialize = function() {
    this.model.bind('change', this.render);
    this.model.fetch();
  };

  GameDetailView.prototype.render = function() {
    var $el;
    $el = $(this.template.render({
      game: this.model.attributes
    }));
    this.$el.html($el.html());
    return this;
  };

  return GameDetailView;

})(Backbone.View);
